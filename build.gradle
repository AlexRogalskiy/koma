buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        // 1.3.0 can't complete in IDEA, and native fails on 1.3.10 with kotlin-native#2334
        def pluginVersion
        if (gradle.startParameter.taskNames.any { rq ->
            rq.contains("build") || rq.toLowerCase().contains("native")
        }) {
            pluginVersion = "1.3.0"
        } else {
            pluginVersion = "1.3.10"
        }

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$pluginVersion"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"

    }
}

apply plugin: "org.jetbrains.dokka"

subprojects {
    apply plugin: 'kotlin-multiplatform'
    repositories {
        mavenCentral()
    }
}
// In theory all the `koma-core` implementations could be one project,
// but resolving multiple jvm targets seems to be buggy as of 1.3.10.
// In particular, the tests project cannot depend on all of the koma-core
// backends if they are all targets in the same project, as the disambiguation
// with "configuration:" in the `project(...)` line doesn't work.

project(":koma-core-ejml") {
    archivesBaseName = "koma-core"
    kotlin {
        targets {
            fromPreset(presets.jvm, 'ejml')
        }
        sourceSets {
            commonMain {
                dependencies {
                    implementation project(":koma-core-api")
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                }
            }
            ejmlMain {
                kotlin.srcDir('src')
                dependencies {
                    implementation "org.ejml:ejml-all:0.33"
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                }
            }
        }
    }
}

project(":koma-core-mtj") {
    archivesBaseName = "koma-core"
    kotlin {
        targets {
            fromPreset(presets.jvm, 'mtj')
        }
        sourceSets {
            commonMain {
                dependencies {
                    implementation project(":koma-core-api")
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                }
            }
            mtjMain {
                kotlin.srcDir('src')
                dependencies {
                    implementation "com.googlecode.matrix-toolkits-java:mtj:1.0.4"
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                }
            }
        }
    }
}

project(":koma-core-jblas") {
    archivesBaseName = "koma-core"
    kotlin {
        targets {
            fromPreset(presets.jvm, 'jblas')
        }
        sourceSets {
            commonMain {
                dependencies {
                    implementation project(":koma-core-api")
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                }
            }
            jblasMain {
                kotlin.srcDir('src')
                dependencies {
                    implementation "org.jblas:jblas:1.2.3"
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                }
            }
        }
    }
}
project(":koma-core-js") {
    archivesBaseName = "koma-core"
    kotlin {
        targets {
            fromPreset(presets.js, 'js') {
                tasks[compilations.main.compileKotlinTaskName].kotlinOptions {
                    outputFile = "node_modules/koma_core_implementation.js"
                    moduleKind = "umd"
                    sourceMap = true
                    sourceMapEmbedSources = "always"
                    metaInfo = true
                }
            }
        }
        sourceSets {
            commonMain {
                dependencies {
                    implementation project(":koma-core-api")
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                }
            }
            jsMain {
                kotlin.srcDir('src')
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                }
            }
        }
    }
}

project(":koma-core-cblas") {
    kotlin {
        targets {
            def nativePreset
            def os = org.gradle.internal.os.OperatingSystem.current()
            if(os.isMacOsX())
                nativePreset = presets.macosX64
            else if (os.isWindows())
                nativePreset = presets.mingwX64
            else
                nativePreset = presets.linuxX64

            fromPreset(nativePreset, "native") {
                compilations.main {
                    buildTypes = [ DEBUG, RELEASE ]
                }
            }
            fromPreset(nativePreset, "nativeExample") {
                compilations.main {
                    outputKinds = [ EXECUTABLE ]
                    buildTypes = [ DEBUG, RELEASE ]
                }
            }
        }
        sourceSets {
            commonMain {
                dependencies {
                    implementation project(":koma-core-api")
                }
            }
            nativeMain {
                kotlin.srcDir('src')
            }
            nativeExampleMain {
                dependsOn nativeMain
                kotlin.srcDir('../../examples/native')

            }

        }
    }
}

project(":koma-core-api") {
    kotlin {
        targets {
            def nativePreset
            def os = org.gradle.internal.os.OperatingSystem.current()
            if(os.isMacOsX())
                nativePreset = presets.macosX64
            else if (os.isWindows())
                nativePreset = presets.mingwX64
            else
                nativePreset = presets.linuxX64

            def cblasDefFile
            def lapackeDefFile
            if(os.isMacOsX()) {
                cblasDefFile = "../koma-core/native-cblas/defs_macos/cblas.def"
                lapackeDefFile = "../koma-core/native-cblas/defs_macos/lapacke.def"
            } else if (os.isLinux()) {
                cblasDefFile = "../koma-core/native-cblas/defs_linux/cblas.def"
                lapackeDefFile = "../koma-core/native-cblas/defs_linux/lapacke.def"
            }

            fromPreset(presets.jvm, 'jvm')
            fromPreset(presets.js, 'js')

            fromPreset(nativePreset, "native") {
                compilations.main {
                    buildTypes = [ DEBUG, RELEASE ]
                    cinterops {
                        cblas { defFile(cblasDefFile) }
                        lapacke { defFile(lapackeDefFile) }
                    }

                }
            }
        }
        sourceSets {
            commonMain {
                kotlin.srcDir('common/src')
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                }
            }
            jvmMain {
                kotlin.srcDir('jvm/src')
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                }
            }
            jsMain {
                kotlin.srcDir('js/src')
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                }
            }
            nativeMain {
                kotlin.srcDir('native/src')
                // Shouldn't be needed-- idea bug?
                dependsOn commonMain
            }
        }
    }
}

// A project to generate koma shared/static libraries for native.
//
// Must be a separate project because currently konan only includes symbols
// from the current project (not dependent projects), so the cblas/api
// projects would result in incomplete headers.
//
// Must be named `koma` because of KT-28313. Disabled in intellij
// to prevent clashes with the ordinary koma-native-cblas project.
project(":koma") {
    if (gradle.startParameter.taskNames.any { rq ->
        rq.contains("build") || rq.toLowerCase().contains("native")
    }) {
        kotlin {
            targets {
                def nativePreset
                def os = org.gradle.internal.os.OperatingSystem.current()
                if(os.isMacOsX())
                    nativePreset = presets.macosX64
                else if (os.isWindows())
                    nativePreset = presets.mingwX64
                else
                    nativePreset = presets.linuxX64

                def cblasDefFile
                def lapackeDefFile
                if(os.isMacOsX()) {
                    cblasDefFile = "../koma-core/native-cblas/defs_macos/cblas.def"
                    lapackeDefFile = "../koma-core/native-cblas/defs_macos/lapacke.def"
                } else if (os.isLinux()) {
                    cblasDefFile = "../koma-core/native-cblas/defs_linux/cblas.def"
                    lapackeDefFile = "../koma-core/native-cblas/defs_linux/lapacke.def"
                }
                fromPreset(nativePreset, "native") {
                    compilations.main {
                        outputKinds = [ STATIC, DYNAMIC ]
                        buildTypes = [ DEBUG, RELEASE ]
                        cinterops {
                            cblas { defFile(cblasDefFile) }
                            lapacke { defFile(lapackeDefFile) }
                        }

                    }
                }
            }
            sourceSets {
                commonMain {
                    kotlin.srcDir('../koma-core-api/common/src')
                }
                nativeMain {
                    kotlin.srcDir('../koma-core-api/native/src')
                    kotlin.srcDir('../koma-core/native-cblas/src')
                    // Shouldn't be needed-- idea bug?
                    dependsOn commonMain
                }
            }
        }
    }
}

project(":koma-logging") {
    kotlin {
        targets {
            fromPreset(presets.jvm, 'jvm')
        }
        sourceSets {
            jvmMain {
                kotlin.srcDir('src')
                dependencies {
                    implementation project(":koma-core-api")
                    implementation "org.slf4j:slf4j-api:1.7.21"
                    implementation "ch.qos.logback:logback-classic:1.1.7"
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                }
            }
        }
    }
}

project(":koma-plotting") {
    kotlin {
        targets {
            fromPreset(presets.jvm, 'jvm')
        }
        sourceSets {
            jvmMain {
                kotlin.srcDir('src')
                dependencies {
                    implementation project(":koma-core-api")
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                    implementation "org.knowm.xchart:xchart:3.5.1"

                }

            }
        }
    }
}

project(':koma-tests') {
    kotlin {
        targets {
            fromPreset(presets.jvm, 'jvm')
        }
        sourceSets {
            commonTest {
                dependencies {
                    implementation project(':koma-core-api')
                    implementation 'org.jetbrains.kotlin:kotlin-test-common'
                    implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
                }
            }
            jvmTest {
                kotlin.srcDir("test")
                dependencies {
                    implementation project(':koma-core-mtj')
                    implementation project(':koma-core-jblas')
                    implementation project(':koma-core-ejml')
                    implementation 'org.jetbrains.kotlin:kotlin-test'
                    implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                }
            }
            jsTest {
                dependencies {
                    implementation project(':koma-core-js')
                    implementation 'org.jetbrains.kotlin:kotlin-test-js'
                }
            }
        }
    }
}

task build {
    dependsOn(":buildJvm", ":buildNative", ":buildJs")
}

task buildJs {
    dependsOn(":koma-core-js:build")
    doLast {
        copy {
            from 'koma-core-api/build/libs'
            from 'koma-core/js-default/build/libs'
            include '*-js.jar'
            into getRootDir().toString() + "/build/js"
        }
    }
}
task buildJvm {
    dependsOn(":koma-core-mtj:build")
    dependsOn(":koma-core-ejml:build")
    dependsOn(":koma-core-jblas:build")
    dependsOn(":koma-core-api:jvmJar")
    dependsOn(":koma-plotting:build")
    dependsOn(":koma-logging:build")

    doLast {
        copy {
            from 'koma-core-api/build/libs'
            from 'koma-core/jvm-ejml/build/libs'
            from 'koma-core/jvm-mtj/build/libs'
            from 'koma-core/jvm-jblas/build/libs'
            from 'koma-plotting/build/libs'
            from 'koma-logging/build/libs'
            include '*.jar'
            into getRootDir().toString() + "/build/jvm"
        }
    }

}
task buildNative {
    dependsOn(":koma-core-api:nativeKlibrary")
    dependsOn(":koma-core-cblas:nativeKlibrary")
    dependsOn(":koma:linkReleaseSharedNative")
    dependsOn(":koma:linkReleaseStaticNative")
    dependsOn(":koma-core-cblas:linkReleaseExecutableNativeExample")
    doLast {
        copy {
            from "koma-core-api/build/classes/kotlin/native/main"
            from "koma-core/native-cblas/build/classes/kotlin/native/main"
            include "*.klib"
            into getRootDir().toString() + "/build/native/klib"
        }
        copy {
            from "koma/build/bin/native/main/release"
            include "shared/**"
            include "static/**"
            into getRootDir().toString() + "/build/native"
        }
        copy {
            from "koma-core/native-cblas/build/bin/nativeExample/main/release"
            include "executable/**"
            into getRootDir().toString() + "/build/native"
        }
    }
}

// TODO: Enable all artifacts again
// Workaround via https://discuss.kotlinlang.org/t/how-to-configure-dokka-for-kotlin-multiplatform/9834
dokka {
    impliedPlatforms = ["Common"]
    dependsOn(":codegen")
    outputFormat = "gfm"
    outputDirectory = "docs/markdown"
    moduleName = 'api'
    kotlinTasks {
        []
    }
    sourceRoot {
        path = project(":koma-core-api").kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
    }
    sourceDirs = files([
            "koma-core/native-cblas/src"
    ])

    jdkVersion = 8
    doLast {
        // Dokka uses moduleName for the final folder name, and mangles upper case letters
        file("docs/markdown/api").renameTo(file("docs/markdown/Reference_API_Docs"))
    }
}

//apply from: 'buildscripts/publishing.gradle'
apply from: 'buildscripts/codegen.gradle'





