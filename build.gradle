def ReifiedMatrices = ['T', 'Double', 'Float', 'Int']
def ReifiedNDArrays = ['T', 'Double', 'Float', 'Long', 'Int', 'Short', 'Byte']
def NumericalConstantSuffixes = [
    'T': ' as T',
    'Double': '.0',
    'Float': '.0f',
    'Long': 'L',
    'Int': '',
    'Short': '.toShort()',
    'Byte': '.toByte()'
]

buildscript {
    ext.kotlin_version = '1.2.31'
    ext.kotlin_native_version = '0.8.2'
    ext.project_version = '0.12'

    repositories {
        mavenCentral()
        jcenter()
        maven { url  "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:$kotlin_native_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

project(':koma-core-api-common') {
    apply plugin: 'kotlin-platform-common'

    sourceSets.main.kotlin.srcDirs = ['src', 'srcgen']

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
    }
}

project(":koma-core-api-jvm") {
    apply plugin: 'kotlin-platform-jvm'

    sourceSets.main.kotlin.srcDirs = ['src']

    repositories {
        mavenCentral()
    }

    dependencies {
        expectedBy project(":koma-core-api-common")
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
    assemble.doLast {
        copy {
            from 'build/libs'
            into getRootDir().toString() + "/build/jvm"
        }
    }
}

project(":koma-core-api-js") {
    apply plugin: 'kotlin-platform-js'

    sourceSets.main.kotlin.srcDirs = ['src']

    repositories {
        mavenCentral()
    }

    dependencies {
        expectedBy project(":koma-core-api-common")
        compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    }
    compileKotlin2Js.kotlinOptions.outputFile = "node_modules/koma_core_api.js"
    compileKotlin2Js.kotlinOptions.moduleKind = "umd"
    compileKotlin2Js.kotlinOptions.sourceMap = true
    compileKotlin2Js.kotlinOptions.sourceMapEmbedSources = "always"
    compileKotlin2Js.kotlinOptions.metaInfo = true
}

project(":koma-core-ejml") {
    apply plugin: 'kotlin-platform-jvm'

    sourceSets.main.kotlin.srcDirs = ['src', 'srcgen']

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(":koma-core-api-jvm")
        compile "org.ejml:ejml-all:0.33"
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
    assemble.doLast {
        copy {
            from 'build/libs'
            into getRootDir().toString() + "/build/jvm"
        }
    }
}
project(":koma-core-jblas") {
    apply plugin: 'kotlin-platform-jvm'

    sourceSets.main.kotlin.srcDirs = ['src', 'srcgen']

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(":koma-core-api-jvm")
        compile "org.jblas:jblas:1.2.3"
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
    assemble.doLast {
        copy {
            from 'build/libs'
            into getRootDir().toString() + "/build/jvm"
        }
    }
}

project(":koma-core-mtj") {
    apply plugin: 'kotlin-platform-jvm'

    sourceSets.main.kotlin.srcDirs = ['src', 'srcgen']

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(":koma-core-api-jvm")
        compile("com.googlecode.matrix-toolkits-java:mtj:1.0.4") {
            // Fix issue with pom-only artifacts in MTJ
            exclude module: "com.github.fommil.netlib:all:pom:1.1.2"
        }
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
    assemble.doLast {
        copy {
            from 'build/libs'
            into getRootDir().toString() + "/build/jvm"
        }
    }
}

project(":koma-core-js") {
    apply plugin: 'kotlin-platform-js'

    sourceSets.main.kotlin.srcDirs = ['src', 'srcgen']

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(":koma-core-api-js")
    }


    compileKotlin2Js.kotlinOptions.outputFile = "node_modules/koma_core_implementation.js"
    compileKotlin2Js.kotlinOptions.moduleKind = "umd"
    compileKotlin2Js.kotlinOptions.sourceMap = true
    compileKotlin2Js.kotlinOptions.sourceMapEmbedSources = "always"
    compileKotlin2Js.kotlinOptions.metaInfo = true

    // copy kotlin.js and friends to output dir
    build.doLast {
        configurations.compile.each { File file ->
            copy {
                includeEmptyDirs = false

                from zipTree(file.absolutePath)
                into "node_modules"
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
                }
            }
        }
        copy {
            from getRootDir().toString() + "/node_modules"
            into getRootDir().toString() + "/build/node_modules"
        }
    }
}

project(":koma-core-cblas") {
    apply plugin: 'konan'
    konanArtifacts {
        interop('cblas') {
            // TODO: `headers` here, but search the include path for a blas header,
            // removing the hardcoded one in the defFile
            defFile('cblas.def')
        }
        interop('lapacke') {
            defFile('lapacke.def')
        }
        dynamic('koma') {
            enableMultiplatform true
            srcFiles fileTree('src')
            srcFiles fileTree('srcgen')
            // Because k/native doesnt support ServiceLoaders, reflection, etc., we have to build
            // the API and the artifact together here.
            srcFiles fileTree('../../koma-core-api/native/src')
            linkerOpts "-S"
            enableOptimizations(true)
            libraries {
                artifact 'cblas'
                artifact 'lapacke'
            }
        }
        library('komaKlib') {
            enableMultiplatform true
            srcFiles fileTree('src')
            srcFiles fileTree('srcgen')
            srcFiles fileTree('../../koma-core-api/native/src')
            linkerOpts "-S"
            enableOptimizations(true)
            libraries {
                artifact 'cblas'
                artifact 'lapacke'
            }
        }
        program('komaExample') {

            libraries {
                artifact 'komaKlib'
                srcFiles '../../examples/native/main.kt'
            }
        }
    }
    dependencies {
        expectedBy project(":koma-core-api-common")
    }
    build.doLast {
        copy {
            from "build/konan/bin/linux"
            from "build/konan/libs/linux"
            include "*.kexe"
            include "*.klib"
            include "*.h"
            include "*.so"
            include "*.dylib"
            include "*.dll"
            into getRootDir().toString() + "/build/native"
        }
    }
}

project(':koma-logging') {
    apply plugin: 'kotlin'

    sourceSets.main.kotlin.srcDirs = ['src']

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(":koma-core-api-jvm")
        compile "org.slf4j:slf4j-api:1.7.21"
        compile "ch.qos.logback:logback-classic:1.1.7"
    }
}


project(":koma-plotting") {
    apply plugin: 'kotlin-platform-jvm'

    sourceSets.main.kotlin.srcDirs = ['src']

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(":koma-core-api-jvm")
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile "org.knowm.xchart:xchart:3.5.1"
    }
    assemble.doLast {
        copy {
            from 'build/libs'
            into getRootDir().toString() + "/build/jvm"
        }
    }
}

project(':koma-tests') {
    apply plugin: 'kotlin'

    sourceSets.test.kotlin.srcDirs = ['test']
    repositories {
        mavenCentral()
    }
    dependencies {
        testCompile "junit:junit:4.12"
        testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        testCompile project(':koma-core-mtj')
        testCompile project(':koma-core-ejml')
        testCompile project(':koma-core-jblas')
    }

}

task buildJs {
    dependsOn(":koma-core-js:build")
}
task buildJvm {
    dependsOn(":koma-core-mtj:build")
    dependsOn(":koma-core-ejml:build")
    dependsOn(":koma-core-jblas:build")
    dependsOn(":koma-core-api-jvm:build")
}
task buildNative {
    dependsOn(":koma-core-cblas:build")
}

void genNDArray(String dest, List<String> dtypesNDArray) {
    copy {
        from 'templates'
        into "$dest"
        include 'NDArray.kt'
        expand(factories: fixWhitespaceErrors(factories(dtypesNDArray)),
               primitiveGetSet: fixWhitespaceErrors(primitiveGetSet(dtypesNDArray)),
               typeCheckClauses: fixWhitespaceErrors(typeCheckClauses(dtypesNDArray)))
    }
}

def genCode(project, namespace, dtypesMatrix, dtypesNDArray, dtypeSuffixMap) {
    // Generate matrix types
    dtypesMatrix.forEach { dtype ->
        if (dtype != 'T') {
            copy {
                from 'templates'
                into "$project/matrix"
                include 'DefaultXMatrix.kt'
                rename { "Default${dtype}Matrix.kt" }

                expand(div: getDiv(dtype),
                        epow: getEPow(dtype),
                        dtype: dtype,
                        namespace: namespace)
            }
            copy {
                from 'templates'
                into "$project/matrix"
                include 'DefaultXMatrixFactory.kt'
                rename { "Default${dtype}MatrixFactory.kt" }
                expand(dtype: dtype,
                        namespace: namespace)
            }
        }
        copy {
            from 'templates'
            into "koma-core-api/common/src/koma/extensions"
            include 'extensions_matrix.kt'
            rename { "extensions_matrix_${dtypeName(dtype)}.kt"}
            expand(dtype: dtype,
                   dtypeName: dtypeName(dtype),
                   genDec: genDec(dtype),
                   reifiedDec: reifiedDec(dtype),
                   reifiedInline: dtype == "T" ? "inline " : "",
                   reshapeReceiverType: dtype == "T" ? "Matrix" : "NDArray",
                   factoryPattern: factoryPattern(dtype, "Matrix"),
                   floatersOnly: floatersOnly(dtype),
                   inline: inline(dtype))
        }
    }
    // Generate ndarray types
    dtypesNDArray.forEach { dtype ->
        copy {
            from 'templates'
            into "$project/ndarray"
            include 'DefaultXNDArray.kt'
            rename { "Default${dtypeName(dtype)}NDArray.kt"}
            expand(dtype: dtype,
                   namespace: namespace,
                   storage: getStorage(dtype),
                   genDec: genDec(dtype),
                   initStorage: initStorage(dtype),
                   dtypeName: dtypeName(dtype),
                   getDouble: convertGetter(dtype, "Double"),
                   setDouble: convertSetter(dtype, "Double"),
                   getByte: convertGetter(dtype, "Byte"),
                   setByte: convertSetter(dtype, "Byte"),
                   getInt: convertGetter(dtype, "Int"),
                   setInt: convertSetter(dtype, "Int"),
                   getFloat: convertGetter(dtype, "Float"),
                   setFloat: convertSetter(dtype, "Float"),
                   getLong: convertGetter(dtype, "Long"),
                   setLong: convertSetter(dtype, "Long"),
                   getShort: convertGetter(dtype, "Short"),
                   setShort: convertSetter(dtype, "Short"))
        }
        if (dtype != "T") {
            copy {
                from 'templates'
                into "$project/ndarray"
                include 'DefaultXNDArrayFactory.kt'
                rename { "Default${dtypeName(dtype)}NDArrayFactory.kt"}
                expand(dtype: dtype,
                        literalSuffix: dtypeSuffixMap[dtype],
                        namespace: namespace)
            }
        }
        copy {
            from 'templates'
            into "koma-core-api/common/src/koma/extensions"
            include 'extensions_ndarray.kt'
            rename { "extensions_ndarray_${dtypeName(dtype)}.kt"}
            expand(dtype: dtype,
                    dtypeName: dtypeName(dtype),
                    genDec: genDec(dtype),
                    reifiedDec: reifiedDec(dtype),
                    toMatrix: toMatrix(dtype, dtypesMatrix),
                    operators: operators(dtype),
                    factoryPrefix: dtype == "T" ? "Generic" : "Numerical",
                    factoryPattern: factoryPattern(dtype, "NDArray"),
                    inline: inline(dtype),
                    extensionMap: extensionMap(dtype),
                    extensionCreate: extensionCreate(dtype),
                    extensionMapIndexed: extensionMapIndexed(dtype),
                    extensionMapIndexedN: extensionMapIndexedN(dtype),
                    reifiedInline: dtype == "T" ? "inline " : "",
                    arrayType: dtype == "T" ? "Typed" : dtype,
                    arrayClass: dtype == "T" ? "Array" : "${dtype}Array")
        }
    }
}

task codegen {
    doLast {
        genNDArray("koma-core-api/common/src/koma/ndarray", ReifiedNDArrays)
        genCode("koma-core-api/common/src/koma/internal/default/generated",
                "koma.internal.default.generated",
                ReifiedMatrices, ReifiedNDArrays, NumericalConstantSuffixes)
    }
}

def getDiv(dtype) {
    if (dtype != 'Int')
        return """
    override fun div(other: ${dtype}): Matrix<${dtype}>
            = this.mapIndexed { _, _, ele -> ele/other}
"""
    else
        return ""
}
def getEPow(dtype) {
    if (dtype != 'Int')
        return """
    override fun epow(other: ${dtype}): Matrix<${dtype}> 
            = this.mapIndexed { _, _, ele -> pow(ele.toDouble(), other.toDouble()).to${dtype}() }
"""
    else
        return ""

}


def getStorage(dtype) {
    if (dtype != 'T')
        return "${dtype}Array"
    else
        return "Array<T>"
}

def genDec(dtype) {
    if (dtype != 'T')
        return ""
    else
        return "<T>"
}

def reifiedDec(dtype) {
    dtype == 'T' ? "<reified T>" : ""
}

def initStorage(dtype) {
    if (dtype != 'T')
        return "        storage = ${dtype}Array(shape.reduce{ a, b-> a * b}, {init.invoke(linearToNIdx(it))}) \n"
    else
        return "        @Suppress(\"UNCHECKED_CAST\")\n" +
               "        storage = Array(shape.reduce{ a, b-> a * b}, {init.invoke(linearToNIdx(it)) as Any?}) as Array<T>"
}

def dtypeName(dtype) {
    if (dtype != 'T')
        return dtype
    else
        return "Generic"
}

def convertGetter(baseDtype, toDtype) {
    if(baseDtype == 'T')
        return "    override fun get${toDtype}(i: Int): ${toDtype} {\n" +
               "        val ele = getGeneric(i)\n" +
               "        if (ele is ${toDtype})\n" +
               "            return ele\n" +
               "        else\n" +
               "            error(wrongType)\n" +
               "    }"
    else
        return "    override fun get${toDtype}(i: Int): ${toDtype} {\n" +
               "        val ele = storage[checkLinearIndex(i)]\n" +
               "        return ele.to${toDtype}()\n" +
               "    }"
}

def convertSetter(baseDtype, toDtype) {
    if(baseDtype == 'T')
        return "    override fun set${toDtype}(i: Int, v: ${toDtype}) {\n" +
               "       setGeneric(i, v as ${baseDtype})\n" +
               "    }\n"
    else
        return "    override fun set${toDtype}(i: Int, v: ${toDtype}) {\n" +
               "        storage[checkLinearIndex(i)] = v.to${baseDtype}()\n" +
               "    }\n"
}

def floatersOnly(dtype) {
    if(dtype == "Double" || dtype == "Float") {
        return "\n" +
                "@KomaJvmName(\"set1D${dtype}FromInt\")\n" +
                "@KomaJsName(\"set1D${dtype}FromInt\")\n" +
                "operator fun Matrix<${dtype}>.set(i: Int, v: Int) = this.set${dtype}(i, v.to${dtype}())\n" +
                "@KomaJvmName(\"set2D${dtype}FromInt\")\n" +
                "@KomaJsName(\"set2D${dtype}FromInt\")\n" +
                "operator fun Matrix<${dtype}>.set(i: Int, j: Int, v: Int) = this.set${dtype}(i, j, v.to${dtype}())\n" +
                "\n" +
                "@KomaJvmName(\"allClose${dtype}\")\n" +
                "fun Matrix<${dtype}>.allClose(other: Matrix<${dtype}>, rtol:Double=1e-05, atol:Double=1e-08): Boolean {\n" +
                "    if(other.numRows() != numRows() || other.numCols() != numCols())\n" +
                "        return false\n" +
                "    for(row in 0 until this.numRows()) {\n" +
                "        for (col in 0 until this.numCols()) {\n" +
                "            val err = kotlin.math.abs(this[row, col] - other[row, col])\n" +
                "            if (err > atol + rtol * kotlin.math.abs(this[row, col]))\n" +
                "                return false\n" +
                "        }\n" +
                "    }\n" +
                "    return true\n" +
                "}"
    }
    else {
        return ""
    }
}

def toMatrix(dtype, dtypesMatrix) {
    if (dtype in dtypesMatrix && dtype != "T") {
        return "@koma.internal.JvmName(\"toMatrix${dtype}\")\n" +
                "fun NDArray<${dtype}>.toMatrix(): Matrix<${dtype}> {\n" +
                "    if (this is Matrix)\n" +
                "        return this\n" +
                "    val dims = this.shape()\n" +
                "    return when (dims.size) {\n" +
                "        1 -> { Matrix.${dtype.toLowerCase()}Factory.zeros(dims[0], 1).fill { row, _ -> this[row] } }\n" +
                "        2 -> { Matrix.${dtype.toLowerCase()}Factory.zeros(dims[0], dims[1]).fill { row, col -> this[row, col] } }\n" +
                "        else -> error(\"Cannot convert NDArray with \${dims.size} dimensions to matrix (must be 1 or 2)\")\n" +
                "    }\n" +
                "}"
    }
    else if (dtype == "T") {
        return "@Suppress(\"UNCHECKED_CAST\")\n" +
                "@koma.internal.JvmName(\"toMatrixGeneric\")\n" +
                "fun <T> NDArray<T>.toMatrixOrNull(): Matrix<T>? {\n" +
                "    \n" +
                "    val ele = this.toIterable().iterator().next()\n" +
                "    return when (ele) {\n" +
                dtypesMatrix
                        .findAll{it != "T"}
                        .collect{"        is ${it} -> { try{(this as NDArray<${it}>).toMatrix() as Matrix<T>}catch(e:Exception){null}}\n"}.join() +
                "        else -> { null }\n" +
                "    }\n" +
                "}"
    }
    else {
        return ""
    }
}

def extensionCreate(dtype) {
    if (dtype != "T") {
        return "    = NDArray.${dtype.toLowerCase()}Factory.zeros(*lengths).fill(filler)\n"
    } else {
        return "    = NDArray.createGeneric<T>(*lengths, filler=filler)\n"
    }
}
def extensionMap(dtype) {
    if (dtype != "T") {
        return "    = NDArray.${dtype.toLowerCase()}Factory.zeros(*shape().toIntArray()).fillLinear { f(this.get${dtype}(it)) }\n"
    } else {
        return "    = NDArray.createGeneric<T>(*shape().toIntArray(), filler = { f(this.getGeneric(*it)) })\n"
    }
}
def extensionMapIndexed(dtype) {
    if (dtype != "T") {
        return "    = NDArray.${dtype.toLowerCase()}Factory.zeros(*shape().toIntArray()).fillLinear { f(it, this.get${dtype}(it)) }\n"
    } else {
        return "    = NDArray.createGeneric<T>(*shape().toIntArray(), filler= { idx-> f(nIdxToLinear(idx), this.getGeneric(*idx)) })\n"
    }
}
def extensionMapIndexedN(dtype) {
    if (dtype != "T") {
        return "    = NDArray.${dtype.toLowerCase()}Factory.zeros(*shape().toIntArray()).fillBoth { nd, linear -> f(nd, get${dtype}(linear)) }\n"
    } else {
        return "    = NDArray.createGeneric<T>(*shape().toIntArray(), filler = { idx -> f(idx, this.getGeneric(*idx)) })\n"
    }
}

def operators(dtype) {
    if (dtype != "T") {
        return "\n" +
                "@koma.internal.JvmName(\"div${dtype}\")\n" +
                "operator fun NDArray<${dtype}>.div(other: ${dtype}) = map { (it/other).to${dtype}() }\n" +
                "@koma.internal.JvmName(\"timesArr${dtype}\")\n" +
                "operator fun NDArray<${dtype}>.times(other: NDArray<${dtype}>) = mapIndexedN { idx, ele -> (ele*other.get(*idx)).to${dtype}() }\n" +
                "@koma.internal.JvmName(\"times${dtype}\")\n" +
                "operator fun NDArray<${dtype}>.times(other: ${dtype}) = map { (it * other).to${dtype}() }\n" +
                "@koma.internal.JvmName(\"unaryMinus${dtype}\")\n" +
                "operator fun NDArray<${dtype}>.unaryMinus() = map { (-it).to${dtype}() }\n" +
                "@koma.internal.JvmName(\"minus${dtype}\")\n" +
                "operator fun NDArray<${dtype}>.minus(other: ${dtype}) = map { (it - other).to${dtype}() }\n" +
                "@koma.internal.JvmName(\"minusArr${dtype}\")\n" +
                "operator fun NDArray<${dtype}>.minus(other: NDArray<${dtype}>) = mapIndexedN { idx, ele -> (ele - other.get(*idx)).to${dtype}() }\n" +
                "@koma.internal.JvmName(\"plus${dtype}\")\n" +
                "operator fun NDArray<${dtype}>.plus(other: ${dtype}) = map { (it + other).to${dtype}() }\n" +
                "@koma.internal.JvmName(\"plusArr${dtype}\")\n" +
                "operator fun NDArray<${dtype}>.plus(other: NDArray<${dtype}>) = mapIndexedN { idx, ele -> (ele + other.get(*idx)).to${dtype}() }\n" +
                "@koma.internal.JvmName(\"pow${dtype}\")\n" +
                "infix fun NDArray<${dtype}>.pow(exponent: Int) = map { pow(it.toDouble(), exponent).to${dtype}() }\n" +
                ""
    }
    else {
        return ""
    }
}

def inline(dtype) {
    if (dtype != "T") {
        return "inline "
    }
    else {
        return ""
    }
}

def factoryPattern(dtype, klass) {
    if (dtype == "T") {
        if (klass == "NDArray")
            return { "NDArray.createGeneric($it)" }
        return { "getFactory().zeros($it).fill" }
    } else
        return { "${klass}.${dtype.toLowerCase()}Factory.zeros($it).fill" }
}

String fixWhitespaceErrors(String input) {
    return input.replaceAll(~"\n[ \t]+(?=\n)", "\n").trim()
}

def primitiveGetSet(types) {
    def indent = "\n    "
    types.findAll { it != "T" }.collect {
        """
        @KomaJsName("get${it}ND")
        fun get$it(vararg indices: Int) = get$it(safeNIdxToLinear(indices))
        @KomaJsName("get${it}1D")
        fun get$it(i: Int): $it = (getGeneric(i) as Number).to$it()
        @KomaJsName("set${it}ND")
        fun set$it(vararg indices: Int, v: $it) = set$it(safeNIdxToLinear(indices), v)
        @KomaJsName("set${it}1D")
        fun set$it(i: Int, v: $it) { setGeneric(i, v as T) }
        """.stripIndent().replaceAll("\n", indent)
    }.join(indent)
}

def typeCheckClauses(types) {
    types.findAll { it != "T" }.collect {
        String.format("%-13s -> ${it.toLowerCase()}Factory.zeros(*dims).fill { filler(it) as $it }",
                      "$it::class")
    }.join("\n                ")
}

def factories(types) {
    types.findAll { it != "T" }.collect {
        def fieldName = "${it.toLowerCase()}Factory"
        """
        var $fieldName: NumericalNDArrayFactory<$it>
            get() = _$fieldName ?: get${it}NDArrayFactory().also { _$fieldName = it }
            set(value) { _$fieldName = value }
        private var _$fieldName: NumericalNDArrayFactory<$it>? = null
        """
    }.join("")
}

apply from: 'buildscripts/publishing.gradle'
